<UserControl x:Class="CashDepartment.TransactionsConfig.Shell.Content.Params"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:mui="http://firstfloorsoftware.com/ModernUI"
             xmlns:myViewModel="clr-namespace:CashDepartment.TransactionsConfig.Shell.ViewModel"
             xmlns:enum="clr-namespace:CashDepartment.WellKnownBusinessObjects;assembly=CashDepartment.WellKnownBusinessObjects"
			 xmlns:enumCore="clr-namespace:CashDepartment.WellKnownBusinessObjects.Core;assembly=CashDepartment.WellKnownBusinessObjects"
			 xmlns:enumTrans="clr-namespace:CashDepartment.Server.DomainModel.Enities.Transactions;assembly=CashDepartment.TransactionsConfig.Data"
             xmlns:enumTransW="clr-namespace:CashDepartment.WellKnownBusinessObjects.Transactions;assembly=CashDepartment.WellKnownBusinessObjects"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:myData="clr-namespace:CashDepartment.TransactionsConfig.Shell.Data"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">

    <UserControl.DataContext>
        <myViewModel:ParamsViewModel/>
    </UserControl.DataContext>

    <UserControl.Resources>
        
        <myData:IntToVisibilityConverter x:Key="IntToVisibilityConverter"/>
        
        <ObjectDataProvider x:Key="EnumBusinessProcessSourceType" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="enum:BusinessProcessSourceType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="EnumAccountType" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="enumCore:AccountType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="EnumTransactionAmount" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="enumTrans:TransactionAmount"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="EnumTransactionType" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="enumTransW:TransactionType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="EnumTransactionSubtype" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="enumTransW:TransactionSubtype"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="EnumTransactionDocType" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="enumTransW:TransactionDocType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="EnumPaymentPurposeType" MethodName="GetValues" ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type Type="enumTransW:PaymentPurposeType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <DataTemplate x:Key="ListViewMainDataTemplate1">
            <Grid Margin="0,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Label Content="{Binding TransactionEvent}" FontWeight="Bold" Margin="0,10,0,0"/>
                <DataGrid ItemsSource="{Binding Metadata}" AutoGenerateColumns="False" RowHeaderWidth="0" HeadersVisibility="None" Grid.Row="1" GridLinesVisibility="None" CanUserResizeRows="False" CanUserAddRows="False" CanUserDeleteRows="False" CellStyle="{DynamicResource DataGridCellStyle2}">
                    <DataGrid.Columns>
                        <DataGridTemplateColumn>       
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    
                                    <StackPanel Orientation="Vertical">
                                        <Label Margin="0,15,0,5">
											<Label.Content>
												<TextBlock Text="{Binding Introduction}" TextDecorations="Underline"/>
											</Label.Content>
											</Label>
                                        <DataGrid ItemsSource="{Binding Params}" AutoGenerateColumns="False" GridLinesVisibility="All" RowHeaderWidth="0"  HorizontalAlignment="Left" CanUserAddRows="False" CanUserResizeRows="False" CanUserDeleteRows="True" HeadersVisibility="None" CellStyle="{DynamicResource DataGridCellStyle1}">
                                            <DataGrid.Columns>
                                                <DataGridTextColumn Binding="{Binding AdditionalParams}" Width="{Binding Source={x:Reference colAdditionalParams}, Path=Width, Mode=TwoWay}"/>
                                                <DataGridComboBoxColumn ItemsSource="{Binding Source={StaticResource EnumBusinessProcessSourceType}}" SelectedValueBinding="{Binding DebitSource}" Width="{Binding Source={x:Reference colDebitSource}, Path=Width, Mode=TwoWay}"/>
                                                <DataGridComboBoxColumn ItemsSource="{Binding Source={StaticResource EnumAccountType}}" SelectedValueBinding="{Binding DebitType}" Width="{Binding Source={x:Reference colDebitType}, Path=Width, Mode=TwoWay}"/>
                                                <DataGridComboBoxColumn ItemsSource="{Binding Source={StaticResource EnumBusinessProcessSourceType}}" SelectedValueBinding="{Binding CreditSource}" Width="{Binding Source={x:Reference colCreditSource}, Path=Width, Mode=TwoWay}"/>
                                                <DataGridComboBoxColumn ItemsSource="{Binding Source={StaticResource EnumAccountType}}" SelectedValueBinding="{Binding CreditType}" Width="{Binding Source={x:Reference colCreditType}, Path=Width, Mode=TwoWay}"/>
                                                <DataGridComboBoxColumn ItemsSource="{Binding Source={StaticResource EnumTransactionAmount}}" SelectedValueBinding="{Binding Amount}" Width="{Binding Source={x:Reference colAmount}, Path=Width, Mode=TwoWay}"/>
                                                <DataGridCheckBoxColumn Binding="{Binding IsUnion}" Width="{Binding Source={x:Reference colIsUnion}, Path=Width, Mode=TwoWay}"/>
                                                <DataGridCheckBoxColumn Binding="{Binding NeedSymbol}" Width="{Binding Source={x:Reference colNeedSymbol}, Path=Width, Mode=TwoWay}"/>
                                                <DataGridTextColumn Binding="{Binding Symbol}" Width="{Binding Source={x:Reference colSymbol}, Path=Width, Mode=TwoWay}"/>
                                                <DataGridComboBoxColumn ItemsSource="{Binding Source={StaticResource EnumTransactionType}}" SelectedValueBinding="{Binding Type}" Width="{Binding Source={x:Reference colType}, Path=Width, Mode=TwoWay}"/>
                                                <DataGridComboBoxColumn ItemsSource="{Binding Source={StaticResource EnumTransactionSubtype}}" SelectedValueBinding="{Binding Subtype}" Width="{Binding Source={x:Reference colSubtype}, Path=Width, Mode=TwoWay}"/>
                                                <DataGridComboBoxColumn ItemsSource="{Binding Source={StaticResource EnumTransactionDocType}}" SelectedValueBinding="{Binding DocType}" Width="{Binding Source={x:Reference colDocType}, Path=Width, Mode=TwoWay}"/>
                                                <DataGridComboBoxColumn ItemsSource="{Binding Source={StaticResource EnumPaymentPurposeType}}" SelectedValueBinding="{Binding PaymentPurpose}" Width="{Binding Source={x:Reference colPaymentPurpose}, Path=Width, Mode=TwoWay}"/>
                                            </DataGrid.Columns>
                                        </DataGrid>
                                        <Button Content="Add new row" Grid.Row="2"  HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,5,0,0" Command="{Binding RelativeSource={RelativeSource Findancestor, AncestorType={x:Type UserControl}}, Path=DataContext.AddNewRowCommand}" CommandParameter="{Binding Params}"/>
                                    </StackPanel>
                                    
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </Grid>
        </DataTemplate>

		 <Style x:Key="ListViewItemStyle1" TargetType="{x:Type ListViewItem}">
        	<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        	<Setter Property="Background" Value="Transparent"/>
        	<Setter Property="BorderBrush" Value="Transparent"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="Margin" Value="0"/>
        	<Setter Property="Foreground" Value="{DynamicResource ItemText}"/>
        	<Setter Property="Padding" Value="5,2"/>
        	<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type ListViewItem}">
        				<Grid Background="{TemplateBinding Background}">
        					<Border x:Name="Selection" Visibility="Collapsed"/>
        					<GridViewRowPresenter Columns="{TemplateBinding GridView.ColumnCollection}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Grid.RowSpan="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        					<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        				</Grid>
        				<ControlTemplate.Triggers>
        					<Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
        						<Setter Property="Visibility" TargetName="contentPresenter" Value="Visible"/>
        					</Trigger>
        					<Trigger Property="IsMouseOver" Value="True">
        						<Setter Property="Visibility" TargetName="Selection" Value="Visible"/>
        						<Setter Property="Background" TargetName="Selection" Value="{DynamicResource ItemBackgroundHover}"/>
        						<Setter Property="Foreground" Value="{DynamicResource ItemTextHover}"/>
        					</Trigger>
        					<Trigger Property="IsSelected" Value="True">
        						<!--<Setter Property="Visibility" TargetName="Selection" Value="Visible"/>
        						<Setter Property="Background" TargetName="Selection" Value="{DynamicResource ItemBackgroundSelected}"/>
        						<Setter Property="Foreground" Value="{DynamicResource ItemTextSelected}"/>-->
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="False">
        						<Setter Property="Foreground" Value="{DynamicResource ItemTextDisabled}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}" Color="#FF000000"/>
        <Style x:Key="DataGridCellStyle1" TargetType="{x:Type DataGridCell}">
        	<Setter Property="Background" Value="Transparent"/>
        	<Setter Property="BorderBrush" Value="Transparent"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type DataGridCell}">
        				<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
        					<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        				</Border>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        	<Style.Triggers>
        		<Trigger Property="IsSelected" Value="True">
        			<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
        			<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        		</Trigger>
        		<Trigger Property="IsKeyboardFocusWithin" Value="True">
        			<Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
        		</Trigger>
        		<MultiTrigger>
        			<MultiTrigger.Conditions>
        				<Condition Property="IsSelected" Value="true"/>
        				<Condition Property="Selector.IsSelectionActive" Value="false"/>
        			</MultiTrigger.Conditions>
        			<Setter Property="Background" Value="Transparent"/>
        			<Setter Property="BorderBrush" Value="Transparent"/>
        			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
        		</MultiTrigger>
        		<Trigger Property="IsEnabled" Value="false">
        			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        		</Trigger>
        	</Style.Triggers>
        </Style>
        <Style x:Key="DataGridCellStyle2" TargetType="{x:Type DataGridCell}">
        	<Setter Property="Background" Value="Transparent"/>
        	<Setter Property="BorderBrush" Value="Transparent"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type DataGridCell}">
        				<Border x:Name="Bord1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
        					<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        				</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsSelected" Value="True">
        			<Setter Property="BorderBrush" TargetName="Bord1" Value="Transparent"/>        	
        		</Trigger>
        		<Trigger Property="IsKeyboardFocusWithin" Value="True">
        			<Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
        		</Trigger>
        		<MultiTrigger>
        			<MultiTrigger.Conditions>
        				<Condition Property="IsSelected" Value="true"/>
        				<Condition Property="Selector.IsSelectionActive" Value="false"/>
        			</MultiTrigger.Conditions>
        			<Setter Property="Background" Value="Transparent"/>
        			<Setter Property="BorderBrush" Value="Transparent"/>
        			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
        		</MultiTrigger>
        		<Trigger Property="IsEnabled" Value="false">
        			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        		</Trigger>
						</ControlTemplate.Triggers>
        		
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        	
        </Style>        		

    </UserControl.Resources>


    <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Disabled" HorizontalAlignment="Left">
        <Grid Style="{StaticResource ContentRoot}">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <DataGrid AutoGenerateColumns="False" Margin="10,0,0,0" GridLinesVisibility="All" RowHeaderWidth="0" Visibility="{Binding DataCollection.Count, Converter={StaticResource IntToVisibilityConverter}, Mode=OneWay}">
                <DataGrid.Columns>
                    <DataGridTextColumn x:Name="colAdditionalParams" Header="AdditionalParams" />
                    <DataGridTextColumn x:Name="colDebitSource" Header="DebitSource" />
                    <DataGridTextColumn x:Name="colDebitType" Header="DebitType" />
                    <DataGridTextColumn x:Name="colCreditSource" Header="CreditSource" />
                    <DataGridTextColumn x:Name="colCreditType" Header="CreditType" />
                    <DataGridTextColumn x:Name="colAmount" Header="Amount" />
                    <DataGridTextColumn x:Name="colIsUnion" Header="IsUnion" />
                    <DataGridTextColumn x:Name="colNeedSymbol" Header="NeedSymbol" />
                    <DataGridTextColumn x:Name="colSymbol" Header="Symbol" />
                    <DataGridTextColumn x:Name="colType" Header="Type" />
                    <DataGridTextColumn x:Name="colSubtype" Header="Subtype" />
                    <DataGridTextColumn x:Name="colDocType" Header="DocType" />
                    <DataGridTextColumn x:Name="colPaymentPurpose" Header="PaymentPurpose" /> 
                </DataGrid.Columns>
            </DataGrid>
            <ListView ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Disabled" Grid.Row="1" ItemsSource="{Binding DataCollection}" ItemTemplate="{DynamicResource ListViewMainDataTemplate1}" ItemContainerStyle="{DynamicResource ListViewItemStyle1}"/>
        </Grid>
    </ScrollViewer>
</UserControl>
